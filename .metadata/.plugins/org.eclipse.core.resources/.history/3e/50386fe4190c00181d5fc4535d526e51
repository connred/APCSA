public class Main {

	public static void main(String[] args) {
		System.out.println("Work of Connor Redmond");
	}

	// return the total of all the values in the array.
	public static int getTotal(int[][] a) {
		int x = 0;
		for (int row = 0; row < a.length; row++) {
			for (int column = 0; column < a[row].length; column++) {
				x += a[row][column];
			}
		}
		return x;
	}

	// return the average of all the values in the array.
	public static double getAverage(int[][] a) {
		int numOfVal = 0;
		for (int row = 0; row < a.length; row++) {
			for (int column = 0; column < a[row].length; column++) {
				numOfVal += 1;
			}
		}
		int x = 0;
		for (int row = 0; row < a.length; row++) {
			for (int column = 0; column < a[row].length; column++) {
				x += a[row][column];
			}
		}
		return ((double) x / numOfVal);
	}

	// return the total of the values in the specified row.
	public static int getRowTotal(int[][] a, int row) {
		int total = 0;
		for (int column = 0; column < a[row].length; column++)
			total += a[row][column];
		return total;
	}

	// return the total of the values in the specified column.
	public static int getColumnTotal(int[][] a, int column) {
		int total = 0;
		for (int row = 0; row < a.length; row++)
			total += a[row][column];
		return total;
	}

	// return the highest value in the specified row of the array.
	public static int getHighestInRow(int[][] a, int row) {
		int x = 0;
		int z = -10000000; // could replace this with getLowest but im too lazy :(
		for (int column = 0; column < a[row].length; column++) {
			x = a[row][column];
			if (x > z) {
				z = x;
			}
		}
		return z;
	}

	// return the lowest value in the specified row of the array.
	public static int getLowestInRow(int[][] a, int row) {
		int x = 0;
		int z = 10000000;
		for (int column = 0; column < a[row].length; column++) {
			x = a[row][column];
			if (x < z) {
				z = x;
			}
		}
		return z;
	}

	// return the lowest value in the specified column of the array
	public static int getHighestInColumn(int[][] a, int column) {
		int x = 0;
		for (int row = 0; row < a.length; row++) {
			if ( x < a[row][column]) {
				x = a[row][column];
			}
		}
		return x;
	}

	// return the highest value in the specified column of the array
	public static int getLowestInColumn(int[][] a, int column) {
		int x = 1000000; // could replace this with getHighest but im too lazy :(
		for (int row = 0; row < a.length; row++) {
			if ( x > a[row][column]) {
				x = a[row][column];
			}
		}
		return x;
	}

	// return the diagonal sum, bottom left to top right
	public static int getBottomLeftToTopRightDiagonalSum(int[][] a) {
		int total = 0;
		int y = 0;
		int x = (a.length - 1);
		for (int i = 0; i < a.length; i++) {
			total += a[x][y];
			y += 1;
			x -= 1;
		}
		return total;
	}

	// return the diagonal sum, top left to bottom right
	public static int getTopLeftToBottomRightDiagonalSum(int[][] a) {
		int total = 0;
		int y = 0;
		for (int x = 0; x < a.length; x++) {
			total += a[x][x];
			y = x;
		}
		return total;
	}

	// return true if the array is sorted low to high
	public static boolean isArraySorted(int[][] a) {
		int x = 0;
		int y = 0;
		for (int row = 0; row < a.length; row++) {
			for (int column = 0; column < a[row].length; column++) {
				x = a[row][column];
				if( x > y ) {
					y = x;
				} else {
					return false;
				}
			}
		}
		return true;
	}

	// return true if array is sorted high to low
	public static boolean isArrayReversed(int[][] a) {
		int x = 0;
		int y = 50; // could replace this with getHighest but im too lazy :(
		for (int row = 0; row < a.length; row++) {
			for (int column = 0; column < a[row].length; column++) {
				x = a[row][column];
				if( x < y ) {
					y = x;
				} else {
					return false;
				}
			}
		}
		return true;
	}

	// return true if array is jagged
	public static boolean isJaggedArray(int[][] a) {
		int x = 0;
		int z = a[0].length;
		for (int row = 0; row < a.length; row++) {
			x = a[row].length;
			if (x != z) {
				return true;
			}
		}
		return false;
	}

	// return true if array is square (n x n)
	public static boolean isSquareArray(int[][] a) {
		int length = a.length;
		int test = 0;
		for (int row = 0; row < length; row++) {
			if (a[row].length == length) {
				test += 1;
			}
		}
		if (length == (test)) {
			return true;
		} else {
			return false;
		}
	}

	// return true if array is rectangular (n x m)
	public static boolean isRectangularArray(int[][] a) {
		int[][] 
				squarepos1, squarepos2,
				squareneg1, squareneg2,
				sorted1, sorted2, 
				reverse1, reverse2,
				jagged1, jagged2, 
				tall1, tall2, 
				wide1, wide2,
				negative1, negative2;
		public void setUp() {
			   sorted1 = new int[][] { //s
				   {1,2,3,4},
				   {5,6,7,8},
				   {9,10,11,12},
				   {13,14,15,16}
			   };
		 	   sorted2 = new int[][] {  //s
				   {11,12,13},
				   {15,16,17},
				   {19,20,21},
				   {23,24,25}
			   };
			   reverse1 = new int[][] {//s
				   {16,15,14,13},
				   {12,11,10,9},
				   {8,7,6,5},
				   {4,3,2,1}
			   };
			   reverse2 = new int[][] {//s
				   {26,25,24,23},
				   {22,21,20,19},
				   {18,17,16,15},
				   {14,13,12,11}
			   };
			   squarepos1 = new int[][] {//s
				   {2,2,3,4},
				   {5,8,7,8},
				   {0,10,3,12},
				   {13,22,15,8}
			   };
			   squarepos2 = new int[][] { //s
				   {12,22,33,44},
				   {55,68,77,88},
				   {90,110,23,312},
				   {413,522,615,78}
			   };
			   squareneg1 = new int[][] { //s
				   {-1,-4,-22,-18},
				   {-20,-6,-3,-1},
				   {-99,-15,-18,-6},
				   {-7,-7,-6,-12}
			   };
			   squareneg2 = new int[][] { //s
				   {-11,-41,-221,-181},
				   {-201,-61,-31,-11},
				   {-991,-151,-181,-61},
				   {-71,-71,-61,-121}
			   };
			   jagged1 = new int[][] { //j
				   {1,2},
				   {3,4,6},
				   {8,0,1,9},
				   {-2,-20,-33},
				   {0}
			   };
			   jagged2 = new int[][] { //j
				   {12,22},
				   {32,42,62},
				   {82,02,12,92},
				   {-22,-202,-332},
				   {0}
			   };
			   tall1 = new int[][] { //r
				   {0,1},
				   {2,3},
				   {9,5},
				   {4,-20},
				   {18,16},
				   {20,20}
			   };
			   tall2 = new int[][] { //r
				   {30,31},
				   {32,33},
				   {39,35},
				   {34,-320},
				   {318,316},
				   {320,320}
			   };
			   wide1 = new int[][] {
				   {1,2,3,4,5,6},
				   {9,8,7,6,5,4},
				   {2,8,1,4,2,5}
			   };
			   wide2 = new int[][] {
				   {21,22,23,24,25,26},
				   {29,28,72,62,52,24},
				   {22,82,12,42,22,25}
			   };
			   negative1 = new int[][] {
				   {-3,-4,-12},
				   {-5,-7,-13},
				   {-20,-18,-1}
			   };
			   negative2 = new int[][] {
				   {-31,-41,-112},
				   {-51,-71,-113},
				   {-210,-118,-11}
			   };
	}
}
